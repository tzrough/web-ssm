<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	 <!-- 配置数据源 -->
     <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!-- 基本属性 url、user、password -->        
        <property name="driverClassName" value="${jdbc_driverClassName_mysql}"/>
        <property name="url" value="${jdbc_url_mysql}"/>
        <property name="username" value="${jdbc_username_mysql}"/>
        <property name="password" value="${jdbc_password_mysql}"/>
    </bean>
     
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"/>  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/blackstone/ssm/*/mapper/*.xml"/>
    </bean>   
    
    <!-- DAO接口所在包名，Spring会自动查找其下的类 ,自动扫描了所有的XxxxMapper.xml对应的mapper接口文件,只要Mapper接口类和Mapper映射文件对应起来就可以了-->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.blackstone.ssm.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
    
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<!-- 配置事务管理器 -->
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean> 

    <!-- 配置基于注解的声明式事务 -->
    <!-- enables scanning for @Transactional annotations -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    
    <!-- 采用xml配置的方式：使用别人写好的功能，没有源码，就可以用xml配置 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager" >   
	    <tx:attributes>
	     	<!-- 在哪些方法上添加事务管理，可以写具体方法名，支持通配符 -->
	        <tx:method name="*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="java.lang.Exception"/>  
	    </tx:attributes>
	</tx:advice>
	
	<!-- 通过aop机制完成事务管理 -->
	<aop:config>               
		<!-- 配置切入点 -->                      
	    <aop:pointcut id="target" expression="execution(* com.blackstone.ssm.*.service.*.*(..))" />
	    <aop:advisor advice-ref="transactionAdvice"  pointcut-ref="target"/> 
	</aop:config>
</beans>